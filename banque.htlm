<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Connexion bancaire (démo) – Econya</title>
  <meta name="description" content="Connecte ta banque (démo) pour analyser tes dépenses par catégories et suivre des indicateurs utiles." />
  <link rel="icon" type="image/svg+xml" href="assets/logo.svg" />
  <link rel="stylesheet" href="style.css" />
  <style>
    .pill{display:inline-flex;align-items:center;gap:.5rem;padding:.35rem .6rem;border-radius:999px;font-weight:600;font-size:.85rem}
    .ok{background:#d7f5dd;color:#115c2d}.ko{background:#ffe4e4;color:#8c1b1b}.ghost{background:transparent;border:1px solid #2a7b4f33}
    .grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:14px}
    .card{background:#0f3c2a66;border:1px solid #ffffff12;border-radius:16px;padding:16px}
    table{width:100%;border-collapse:collapse}
    th,td{padding:8px 10px;border-bottom:1px solid #ffffff12}
    th{opacity:.85;text-align:left}
    .kpis{display:grid;grid-template-columns:repeat(auto-fit,minmax(220px,1fr));gap:12px}
    .kpi{background:#0f3c2a88;border:1px solid #ffffff12;border-radius:12px;padding:12px;display:flex;justify-content:space-between}
    .controls{display:flex;gap:8px;flex-wrap:wrap;align-items:center}
    .muted{opacity:.85}
    .premium-only{display:none}
    body.is-premium .premium-only{display:block}
  </style>
  <!-- Chart.js uniquement si premium (chargé dynamiquement en bas) -->
</head>
<body>

<header class="topbar">
  <a class="brand" href="/">
    <img src="assets/logo.svg" alt="Econya" height="28" />
    <span>Econya</span>
  </a>
  <nav class="nav">
    <a href="comparateur.html">Comparateur</a>
    <a href="coach-eco.html">Coach Éco</a>
    <a href="deals.html">Bons plans</a>
    <a href="gamification.html">Gamification</a>
    <a href="profil-eco.html">Profil éco</a>
    <a href="tarifs.html" class="badge">Tarifs</a>
  </nav>
</header>

<main class="hero">
  <h1>Connexion bancaire (démo)</h1>
  <p class="muted">Simule une connexion bancaire pour analyser tes dépenses. En production, on utilisera un agrégateur (Budget Insight / Tink / Salt Edge…).</p>
  <div class="controls" style="margin-top:10px">
    <span class="pill ghost" id="api-status">Vérification du backend…</span>
    <span class="pill ghost" id="ob-status">Open-banking (démo)</span>
    <a class="btn" id="btn-link" href="#">Connecter ma banque (démo)</a>
    <label for="tx-month" class="pill ghost">Mois
      <input id="tx-month" type="month" style="background:transparent;border:none;color:inherit;margin-left:6px" />
    </label>
    <button class="btn ghost" id="tx-load">Charger</button>
  </div>
</main>

<section class="container">
  <div class="kpis" style="margin-bottom:14px">
    <div class="kpi"><span>Dépenses du mois</span><strong id="kpi-spend">0,00 €</strong></div>
    <div class="kpi"><span>Revenus du mois</span><strong id="kpi-income">0,00 €</strong></div>
    <div class="kpi"><span>Épargne potentielle</span><strong id="kpi-savings">0,00 €</strong></div>
  </div>

  <div class="grid">
    <article class="card">
      <h2 style="margin:0 0 10px">Transactions</h2>
      <div style="overflow:auto; max-height:420px">
        <table class="table" id="tx-table">
          <thead>
            <tr>
              <th style="min-width:120px">Date</th>
              <th>Libellé</th>
              <th style="min-width:120px">Catégorie</th>
              <th style="text-align:right;min-width:120px">Montant</th>
            </tr>
          </thead>
          <tbody id="tx-tbody"></tbody>
          <tfoot>
            <tr>
              <td colspan="3" style="text-align:right">Total</td>
              <td id="tx-total" style="text-align:right">0,00 €</td>
            </tr>
          </tfoot>
        </table>
      </div>
    </article>

    <article class="card premium-only">
      <h2 style="margin:0 0 10px">Graphiques (Premium)</h2>
      <canvas id="chartByCat" height="200"></canvas>
      <canvas id="chartCumul" height="200" style="margin-top:12px"></canvas>
      <p class="muted" style="margin-top:8px">
        Passe en <a href="tarifs.html">Premium</a> pour débloquer des graphiques détaillés et des alertes intelligentes.
      </p>
    </article>
  </div>
</section>

<section class="container" style="margin-top:20px">
  <h2>3 conseils rapides</h2>
  <div id="tips" class="grid"></div>
</section>

<footer class="footer">
  <span id="year"></span> © Econya
</footer>

<script src="assets/env.js"></script>
<script>
  /* Boot premium body class */
  (function(){
    const plan = (window.ECONYA_PLAN || "gratuit").toLowerCase();
    if (plan === "premium") document.body.classList.add("is-premium");
  })();

  const $ = s=>document.querySelector(s);
  const apiBase = (window.ECONYA_API_BASE || "").replace(/\/+$/,"");
  $("#year").textContent = new Date().getFullYear();

  function euro(v){return (v<0?'-':'') + Math.abs(v).toFixed(2).replace('.',',') + ' €';}
  function setBadge(el, ok, textOk="OK", textKo="KO"){
    if(!el) return; el.classList.remove("ok","ko","ghost"); el.classList.add(ok?"ok":"ko"); el.textContent = (ok?textOk:textKo);
  }

  /* Ping API + OB (mock) */
  (async () => {
    try{
      const r = await fetch(apiBase + "/sante",{mode:"cors"});
      setBadge($("#api-status"), r.ok, "Backend connecté ✅", "Backend indisponible ❌");
    }catch{ setBadge($("#api-status"), false, "", "Backend indisponible ❌"); }
    try{
      // si ton backend a /ob/provider (mock)
      const r = await fetch(apiBase + "/ob/provider",{mode:"cors"});
      setBadge($("#ob-status"), r.ok, "Open-banking prêt ✅", "Open-banking indisponible ❌");
    }catch{ setBadge($("#ob-status"), false, "", "Open-banking indisponible ❌"); }
  })();

  /* Démarrer “connexion” mock */
  $("#btn-link").addEventListener("click", async (e)=>{
    e.preventDefault();
    try{
      const r = await fetch(apiBase + "/ob/start",{mode:"cors"});
      const j = await r.json();
      // en vrai : window.location = j.url (redirection vers l’agrégateur)
      alert("Démo : redirection simulée.\nURL fournisseur mock : " + (j.url||"(aucune)"));
      setBadge($("#ob-status"), true, "Compte lié (démo) ✅", "Non lié ❌");
    }catch{
      setBadge($("#ob-status"), false, "", "Erreur de liaison ❌");
    }
  });

  /* Transactions démo depuis ton backend (déjà en place) */
  function ymFromInput(){
    const v = $("#tx-month").value; // "2025-08"
    if(!v) return null; return v;
  }

  async function loadTx(reset=false){
    const ym = ymFromInput();
    try{
      const url = ym ? `${apiBase}/transactions?month=${encodeURIComponent(ym)}` : `${apiBase}/transactions`;
      const r = await fetch(url,{mode:"cors"});
      if (!r.ok) throw new Error("HTTP " + r.status);
      const data = await r.json(); // [{date, label, category, amount}, ...]
      renderTx(data);
      renderKPIs(data);
      renderTips(data);
      if (document.body.classList.contains("is-premium")) {
        await ensureChartJS();
        renderCharts(data);
      }
    }catch(e){
      console.error(e);
      $("#tx-tbody").innerHTML = `<tr><td colspan="4">Impossible de charger les transactions.</td></tr>`;
      $("#tx-total").textContent = "0,00 €";
    }
  }

  function renderTx(list){
    const tbody = $("#tx-tbody");
    if(!list || !list.length){ tbody.innerHTML = `<tr><td colspan="4">Aucune transaction.</td></tr>`; $("#tx-total").textContent = "0,00 €"; return; }
    tbody.innerHTML = list.map(tx => `
      <tr>
        <td>${tx.date}</td>
        <td>${tx.label}</td>
        <td>${tx.category||"—"}</td>
        <td style="text-align:right;${tx.amount<0?'color:#c0392b':'color:#115c2d'}">${euro(Math.abs(tx.amount))}</td>
      </tr>
    `).join("");
    const total = list.reduce((a,t)=>a+t.amount,0);
    $("#tx-total").textContent = euro(total);
  }

  function renderKPIs(list){
    const out = {spend:0,income:0};
    list.forEach(t => { if(t.amount<0) out.spend += -t.amount; else out.income += t.amount; });
    const savings = Math.max(0, out.income - out.spend)*0.2; // projection prudente
    $("#kpi-spend").textContent = euro(out.spend);
    $("#kpi-income").textContent = euro(out.income);
    $("#kpi-savings").textContent = euro(savings);
  }

  /* Tips rapides basés sur catégories vues */
  function renderTips(list){
    const cats = new Set(list.map(t=>t.category).filter(Boolean));
    const tips = [];
    if (cats.has("Énergie") || cats.has("Energie")) tips.push(["Énergie","Comparer un contrat indexé raisonnable selon ton profil (HP/HC).","deals.html?cat=energie","Voir offres énergie"]);
    if (cats.has("Télécom")) tips.push(["Télécom","Basculer vers une série spéciale 6–12 € (renégoc à l’anniv).","deals.html?cat=telecom","Voir forfaits"]);
    if (cats.has("Assurance")) tips.push(["Assurances","Pack auto + habitation : souvent -10 à -20 %.","deals.html?cat=assurance","Comparer"]);
    if (cats.has("Courses")) tips.push(["Courses","Activer cashback et anti-gaspi pour 6–12 % d’économies.","deals.html?cat=courses","Cashback"]);
    if (cats.has("Transport")) tips.push(["Transport","Trouver les stations carburant moins chères + éco-conduite.","deals.html?cat=transport","Voir plans"]);
    if (!tips.length) tips.push(["Général","Active les bons plans adaptés à ton profil pour commencer.","deals.html","Parcourir les bons plans"]);

    $("#tips").innerHTML = tips.slice(0,3).map(t=>`
      <article class="card">
        <h3>${t[0]}</h3>
        <p class="muted">${t[1]}</p>
        <a class="btn ghost" href="${t[2]}">${t[3]}</a>
      </article>
    `).join("");
  }

  /* Charts (premium) */
  function byCat(list){
    const map = {};
    list.forEach(t=>{
      const c = t.category || "Autre";
      map[c] = map[c] || 0;
      if(t.amount<0) map[c] += -t.amount;
    });
    return map;
  }
  function cumulMensuel(list){
    // tri par date puis cumul dépenses négatives
    const sorted = [...list].sort((a,b)=> a.date.localeCompare(b.date));
    let c=0; const pts=[];
    sorted.forEach(t=>{
      c += t.amount;
      pts.push({x:t.date,y:c});
    });
    return pts;
  }
  async function ensureChartJS(){
    if (window.Chart) return;
    await new Promise((res,rej)=>{
      const s=document.createElement('script');
      s.src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js";
      s.defer=true; s.onload=res; s.onerror=rej; document.body.appendChild(s);
    });
  }
  let chart1, chart2;
  function renderCharts(list){
    const cats = byCat(list);
    const ctx1 = document.getElementById('chartByCat');
    const ctx2 = document.getElementById('chartCumul');
    chart1 && chart1.destroy(); chart2 && chart2.destroy();
    chart1 = new Chart(ctx1, { type:'doughnut', data:{ labels:Object.keys(cats), datasets:[{data:Object.values(cats)}] } });
    chart2 = new Chart(ctx2, { type:'line', data:{ datasets:[{label:'Cumul', parsing:false, data:cumulMensuel(list)}] }, options:{ scales:{ x:{type:'timeseries', time:{unit:'day'}}}}});
  }

  // Init valeurs + actions
  const now = new Date();
  $("#tx-month").value = now.toISOString().slice(0,7);
  $("#tx-load").addEventListener("click", ()=> loadTx());
  loadTx();
</script>
</body>
</html>




